{-# OPTIONS --exact-split --safe --prop #-}
module Foundation.Data.FinNat where

open import Foundation.Universes
open import Foundation.Data.Nat hiding (Injective-suc)
open import Foundation.Data.Nat.Order
open import Foundation.Prop'.Decidable
open import Foundation.Prop'.Identity using (_==_; refl; ap)
open import Foundation.Function using (_$_; _‚àò_)
open import Foundation.Prop'.Function renaming (_$_ to _$'_) using ()
open import Foundation.Function.Properties using (Injective; inj)
open import Foundation.Logic

private
  variable
    n m : ‚Ñï

-- types of natural numbers less than index
data Fin‚Ñï : (n : ‚Ñï) ‚Üí ùí∞‚ÇÄ Àô where
  zero : Fin‚Ñï (suc n)
  suc : (x : Fin‚Ñï n) ‚Üí Fin‚Ñï (suc n)

private
  variable
    a b c : Fin‚Ñï n

instance
  NatFin‚Ñï : Nat (Fin‚Ñï n)
  Nat.Constraint (NatFin‚Ñï {n}) m = m <‚Çú n
  Nat.from‚Ñï (NatFin‚Ñï {suc n}) zero = zero
  Nat.from‚Ñï (NatFin‚Ñï {suc n}) (suc m) = suc $ Nat.from‚Ñï (NatFin‚Ñï {n}) m

  Injective-suc : Injective (Fin‚Ñï.suc {n})
  inj ‚¶É Injective-suc ‚¶Ñ (refl (suc x)) = refl x

  Decidable==Fin‚Ñï : {a b : Fin‚Ñï n} ‚Üí Decidable (a == b)
  Decidable==Fin‚Ñï {a = zero} {zero} = true (refl 0)
  Decidable==Fin‚Ñï {a = zero} {suc b} = false Œª ()
  Decidable==Fin‚Ñï {a = suc a} {zero} = false Œª ()
  Decidable==Fin‚Ñï {a = suc a} {suc b} with decide (a == b)
  Decidable==Fin‚Ñï {suc a} {suc b} | true a==b = true (ap Fin‚Ñï.suc a==b)
  Decidable==Fin‚Ñï {suc a} {suc b} | false ¬¨a==b =
    false Œª { (refl _) ‚Üí ¬¨a==b $' refl b }

to‚Ñï : Fin‚Ñï n ‚Üí ‚Ñï
to‚Ñï zero = 0
to‚Ñï (suc x) = suc (to‚Ñï x)

to‚Ñï< : {a : Fin‚Ñï n} ‚Üí to‚Ñï a < n
to‚Ñï< {a = zero} = z<s
to‚Ñï< {a = suc a} = s<s (to‚Ñï< {a = a})

instance
  Injective-to‚Ñï : Injective (to‚Ñï {n})
  inj ‚¶É Injective-to‚Ñï ‚¶Ñ {x = zero} {zero} _ = refl zero
  inj ‚¶É Injective-to‚Ñï ‚¶Ñ {x = suc x} {suc y} fx==fy = 
    ap Fin‚Ñï.suc $' inj ‚¶É Injective-to‚Ñï ‚¶Ñ $' inj fx==fy

maxFin‚Ñï : Fin‚Ñï (suc n)
maxFin‚Ñï {zero} = zero
maxFin‚Ñï {suc n} = suc maxFin‚Ñï

to‚Ñï-maxFin‚Ñï : to‚Ñï (maxFin‚Ñï {n}) == n
to‚Ñï-maxFin‚Ñï {zero} = refl 0
to‚Ñï-maxFin‚Ñï {suc n} = ap ‚Ñï.suc to‚Ñï-maxFin‚Ñï

toFin‚Ñï : ‚àÄ n (n<m : n < m) ‚Üí Fin‚Ñï m
toFin‚Ñï {suc m} zero _ = zero
toFin‚Ñï {suc m} (suc n) n<m = suc $ toFin‚Ñï n (s<s‚Üí-<- n<m)

to‚Ñï-toFin‚Ñï : (n<m : n < m) ‚Üí to‚Ñï (toFin‚Ñï n n<m) == n
to‚Ñï-toFin‚Ñï {m = suc m} z<s = refl 0
to‚Ñï-toFin‚Ñï {m = suc m} (s<s n<m) = ap suc $' to‚Ñï-toFin‚Ñï n<m

