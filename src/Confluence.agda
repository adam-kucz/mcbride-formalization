{-# OPTIONS --exact-split --prop #-} -- TODO: add --safe
open import Basic using (Rig; wfs)
open import PropUniverses

module Confluence
  {R : ùí∞ Àô} ‚¶É rig : Rig R ‚¶Ñ
  {S : ùí± Àô} ‚¶É wfs : wfs ùí≤ ùíØ S ‚¶Ñ
  where

open import Syntax ‚¶É rig ‚¶Ñ ‚¶É wfs ‚¶Ñ
open import Substitution as Subs
  hiding (sub; _[_/new])
private
  sub = Œª {m}{n}{tag : ExprTag} ‚Üí
          Subs.sub ‚¶É subst = SubstitutableExpr {tag = tag} ‚¶Ñ {m = m}{n}
  _[_/new] = Œª {n}{tag : ExprTag} ‚Üí
               Subs._[_/new] ‚¶É subst = SubstitutableExpr {tag = tag} ‚¶Ñ {n = n}
infix 180 _[_/new]
          
open import Renaming
open import Liftable
open import Computation hiding (v)
open import ParallelReduction
open _‚ñ∑_

open import Confluence.VectorizedSubstitution

-- Lemma 15 (parallel reduction diamond)

open import Relation.Binary.Diamond
open import Logic

diamond-‚ñ∑ : diamond (_‚ñ∑_ {n = n}{tag})
diamond-‚ñ∑ {q = q} (sort i) s‚ñ∑q = q , (s‚ñ∑q , refl q)
diamond-‚ñ∑ (var v) (var v) = var v , (refl (var v) , refl (var v))
diamond-‚ñ∑ (pi œÄ S‚ñ∑S' T‚ñ∑T') (pi œÄ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥)
  with diamond-‚ñ∑ S‚ñ∑S' S‚ñ∑S‚Ä≥ | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥
diamond-‚ñ∑ (pi œÄ S‚ñ∑S' T‚ñ∑T') (pi œÄ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥)
  | S‚Ä¥ , (S'‚ñ∑S‚Ä¥ , S‚Ä≥‚ñ∑S‚Ä¥) | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥) =
  [ œÄ x: S‚Ä¥ ]‚Üí T‚Ä¥ , (pi œÄ S'‚ñ∑S‚Ä¥ T'‚ñ∑T‚Ä¥ , pi œÄ S‚Ä≥‚ñ∑S‚Ä¥ T‚Ä≥‚ñ∑T‚Ä¥)
diamond-‚ñ∑ (lam t‚ñ∑t') (lam t‚ñ∑t‚Ä≥) with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥
diamond-‚ñ∑ (lam t‚ñ∑t') (lam t‚ñ∑t‚Ä≥) | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥) =
  Œªx, t‚Ä¥ , (lam t'‚ñ∑t‚Ä¥ , lam t‚Ä≥‚ñ∑t‚Ä¥)
diamond-‚ñ∑ (annot t‚ñ∑t' T‚ñ∑T') (annot t‚ñ∑t‚Ä≥ T‚ñ∑T‚Ä≥)
  with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥ | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥
diamond-‚ñ∑ (annot t‚ñ∑t' T‚ñ∑T') (annot t‚ñ∑t‚Ä≥ T‚ñ∑T‚Ä≥)
  | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥) | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥) =
  t‚Ä¥ Íûâ T‚Ä¥ , (annot t'‚ñ∑t‚Ä¥ T'‚ñ∑T‚Ä¥ , annot t‚Ä≥‚ñ∑t‚Ä¥ T‚Ä≥‚ñ∑T‚Ä¥)
diamond-‚ñ∑ (elim e‚ñ∑e') (elim e‚ñ∑e‚Ä≥) with diamond-‚ñ∑ e‚ñ∑e' e‚ñ∑e‚Ä≥
diamond-‚ñ∑ (elim e‚ñ∑e') (elim e‚ñ∑e‚Ä≥) | e‚Ä¥ , (e'‚ñ∑e‚Ä¥ , e‚Ä≥‚ñ∑e‚Ä¥) =
  ‚åä e‚Ä¥ ‚åã , (elim e'‚ñ∑e‚Ä¥ , elim e‚Ä≥‚ñ∑e‚Ä¥)
diamond-‚ñ∑ (app f‚ñ∑f' s‚ñ∑s') (app f‚ñ∑f‚Ä≥ s‚ñ∑s‚Ä≥)
  with diamond-‚ñ∑ f‚ñ∑f' f‚ñ∑f‚Ä≥ | diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑s‚Ä≥
diamond-‚ñ∑ (app f‚ñ∑f' s‚ñ∑s') (app f‚ñ∑f‚Ä≥ s‚ñ∑s‚Ä≥)
  | f‚Ä¥ , (f'‚ñ∑f‚Ä¥ , f‚Ä≥‚ñ∑f‚Ä¥) | s‚Ä¥ , (s'‚ñ∑s‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥) =
  f‚Ä¥ ` s‚Ä¥ , (app f'‚ñ∑f‚Ä¥ s'‚ñ∑s‚Ä¥ , app f‚Ä≥‚ñ∑f‚Ä¥ s‚Ä≥‚ñ∑s‚Ä¥)
diamond-‚ñ∑ (elim-comp t‚ñ∑p T‚ñ∑T') (elim-comp t‚ñ∑q T‚ñ∑T‚Ä≥) = diamond-‚ñ∑ t‚ñ∑p t‚ñ∑q
diamond-‚ñ∑ (elim (annot t‚ñ∑t' T‚ñ∑T')) (elim-comp t‚ñ∑q T‚ñ∑T‚Ä≥)
  with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑q | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥
diamond-‚ñ∑ (elim (annot t‚ñ∑t' T‚ñ∑T')) (elim-comp t‚ñ∑q T‚ñ∑T‚Ä≥)
  | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , q‚ñ∑t‚Ä¥) | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥) =
  t‚Ä¥ , (elim-comp t'‚ñ∑t‚Ä¥ T'‚ñ∑T‚Ä¥ , q‚ñ∑t‚Ä¥)
diamond-‚ñ∑ (elim-comp t‚ñ∑q T‚ñ∑T‚Ä≥) (elim (annot t‚ñ∑t' T‚ñ∑T'))
  with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑q | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥
diamond-‚ñ∑ (elim-comp t‚ñ∑q T‚ñ∑T‚Ä≥) (elim (annot t‚ñ∑t' T‚ñ∑T')) 
  | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , q‚ñ∑t‚Ä¥) | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥) =
  t‚Ä¥ , (q‚ñ∑t‚Ä¥ , elim-comp t'‚ñ∑t‚Ä¥ T'‚ñ∑T‚Ä¥)
diamond-‚ñ∑
  (app (annot (lam t‚ñ∑t') (pi œÄ S‚ñ∑S' T‚ñ∑T')) s‚ñ∑s')
  (lam-comp œÄ t‚ñ∑t‚Ä≥ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥ s‚ñ∑s‚Ä≥)
  with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥
     | diamond-‚ñ∑ S‚ñ∑S' S‚ñ∑S‚Ä≥
     | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥
     | diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑s‚Ä≥
diamond-‚ñ∑
  (app (annot (lam t‚ñ∑t') (pi œÄ S‚ñ∑S' T‚ñ∑T')) s‚ñ∑s')
  (lam-comp œÄ {S' = S‚Ä≥}{s' = s‚Ä≥} t‚ñ∑t‚Ä≥ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥ s‚ñ∑s‚Ä≥)
  | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥)
  | S‚Ä¥ , (S'‚ñ∑S‚Ä¥ , S‚Ä≥‚ñ∑S‚Ä¥)
  | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥)
  | s‚Ä¥ , (s'‚ñ∑s‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥) =
  (t‚Ä¥ Íûâ T‚Ä¥) [ s‚Ä¥ Íûâ S‚Ä¥ /new] ,
  (lam-comp œÄ t'‚ñ∑t‚Ä¥ S'‚ñ∑S‚Ä¥ T'‚ñ∑T‚Ä¥ s'‚ñ∑s‚Ä¥ ,
   liftSub-to-‚ñ∑ (newSub (s‚Ä≥ Íûâ S‚Ä≥)) (newSub (s‚Ä¥ Íûâ S‚Ä¥))
     (annot t‚Ä≥‚ñ∑t‚Ä¥ T‚Ä≥‚ñ∑T‚Ä¥) Œª { new ‚Üí annot s‚Ä≥‚ñ∑s‚Ä¥ S‚Ä≥‚ñ∑S‚Ä¥ ; (old v) ‚Üí refl (var v)})
diamond-‚ñ∑
  (lam-comp œÄ t‚ñ∑t‚Ä≥ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥ s‚ñ∑s‚Ä≥)
  (app (annot (lam t‚ñ∑t') (pi œÄ S‚ñ∑S' T‚ñ∑T')) s‚ñ∑s')
  with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥
     | diamond-‚ñ∑ S‚ñ∑S' S‚ñ∑S‚Ä≥
     | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥
     | diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑s‚Ä≥
diamond-‚ñ∑
  (lam-comp œÄ {S' = S‚Ä≥}{s' = s‚Ä≥} t‚ñ∑t‚Ä≥ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥ s‚ñ∑s‚Ä≥)
  (app (annot (lam t‚ñ∑t') (pi œÄ S‚ñ∑S' T‚ñ∑T')) s‚ñ∑s')
  | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥)
  | S‚Ä¥ , (S'‚ñ∑S‚Ä¥ , S‚Ä≥‚ñ∑S‚Ä¥)
  | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥)
  | s‚Ä¥ , (s'‚ñ∑s‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥) =
  (t‚Ä¥ Íûâ T‚Ä¥) [ s‚Ä¥ Íûâ S‚Ä¥ /new] ,
  (liftSub-to-‚ñ∑ (newSub (s‚Ä≥ Íûâ S‚Ä≥)) (newSub (s‚Ä¥ Íûâ S‚Ä¥))
     (annot t‚Ä≥‚ñ∑t‚Ä¥ T‚Ä≥‚ñ∑T‚Ä¥) (Œª { new ‚Üí annot s‚Ä≥‚ñ∑s‚Ä¥ S‚Ä≥‚ñ∑S‚Ä¥ ; (old v) ‚Üí refl (var v)}) ,
   lam-comp œÄ t'‚ñ∑t‚Ä¥ S'‚ñ∑S‚Ä¥ T'‚ñ∑T‚Ä¥ s'‚ñ∑s‚Ä¥)
diamond-‚ñ∑
  (lam-comp œÄ t‚ñ∑t' S‚ñ∑S' T‚ñ∑T' s‚ñ∑s')
  (lam-comp œÄ t‚ñ∑t‚Ä≥ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥ s‚ñ∑s‚Ä≥)
  with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥
     | diamond-‚ñ∑ S‚ñ∑S' S‚ñ∑S‚Ä≥
     | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥
     | diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑s‚Ä≥
diamond-‚ñ∑
  (lam-comp œÄ {S' = S'}{s' = s'} t‚ñ∑t' S‚ñ∑S' T‚ñ∑T' s‚ñ∑s')
  (lam-comp œÄ {S' = S‚Ä≥}{s' = s‚Ä≥} t‚ñ∑t‚Ä≥ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥ s‚ñ∑s‚Ä≥)
  | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥)
  | S‚Ä¥ , (S'‚ñ∑S‚Ä¥ , S‚Ä≥‚ñ∑S‚Ä¥)
  | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥)
  | s‚Ä¥ , (s'‚ñ∑s‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥) =
  (t‚Ä¥ Íûâ T‚Ä¥) [ s‚Ä¥ Íûâ S‚Ä¥ /new] ,
  (annot
    (liftSub-to-‚ñ∑ (newSub (s' Íûâ S')) (newSub (s‚Ä¥ Íûâ S‚Ä¥)) t'‚ñ∑t‚Ä¥
      Œª { new ‚Üí annot s'‚ñ∑s‚Ä¥ S'‚ñ∑S‚Ä¥ ; (old v) ‚Üí refl (var v)})
    (liftSub-to-‚ñ∑ (newSub (s' Íûâ S')) (newSub (s‚Ä¥ Íûâ S‚Ä¥)) T'‚ñ∑T‚Ä¥
      Œª { new ‚Üí annot s'‚ñ∑s‚Ä¥ S'‚ñ∑S‚Ä¥ ; (old v) ‚Üí refl (var v)}) ,
   annot
    (liftSub-to-‚ñ∑ (newSub (s‚Ä≥ Íûâ S‚Ä≥)) (newSub (s‚Ä¥ Íûâ S‚Ä¥)) t‚Ä≥‚ñ∑t‚Ä¥
      Œª { new ‚Üí annot s‚Ä≥‚ñ∑s‚Ä¥ S‚Ä≥‚ñ∑S‚Ä¥ ; (old v) ‚Üí refl (var v)})
    (liftSub-to-‚ñ∑ (newSub (s‚Ä≥ Íûâ S‚Ä≥)) (newSub (s‚Ä¥ Íûâ S‚Ä¥)) T‚Ä≥‚ñ∑T‚Ä¥
      Œª { new ‚Üí annot s‚Ä≥‚ñ∑s‚Ä¥ S‚Ä≥‚ñ∑S‚Ä¥ ; (old v) ‚Üí refl (var v)}))

-- Corollary 16 (confluence)

open import Relation.Binary.ReflexiveTransitiveClosure
  renaming (refl-trans-close to rtc)

diamond-‚Ü† : diamond (_‚Ü†_ {n = n}{tag})
diamond-‚Ü† = parallelogram _‚áù_ diamond-‚ñ∑ 
  where instance _ = ‚áù-‚äÜ-‚ñ∑; _ = ‚ñ∑-‚äÜ-‚Ü†
