{-# OPTIONS --exact-split --prop #-} -- TODO: add --safe
open import Basic using (Rig; wfs)
open import PropUniverses

module Confluence
  {R : ùí∞ Àô} ‚¶É rig : Rig R ‚¶Ñ
  {S : ùí± Àô} ‚¶É wfs : wfs ùí≤ ùíØ S ‚¶Ñ
  where

open import Syntax
open import Substitution as Subs
  hiding (sub; _[_/new])
private
  sub = Œª {m}{n}{tag : ExprTag} ‚Üí
          Subs.sub ‚¶É subst = SubstitutableExpr {tag = tag} ‚¶Ñ {m = m}{n}
  _[_/new] = Œª {n}{tag : ExprTag} ‚Üí
               Subs._[_/new] ‚¶É subst = SubstitutableExpr {tag = tag} ‚¶Ñ {n = n}
infix 180 _[_/new]
          
open import Renaming
open import Liftable
open import Computation hiding (v)
open import ParallelReduction

-- Lemma 15 (parallel reduction diamond)

open import Syntax.Context

open import Type.Unit
open import Type.Sum hiding (_,_)
open import Relation.Binary.Diamond
open import Function hiding (_$_)
open import Logic
open import Proof
open import Function.Proof
open import Relation.Binary.Pointwise

diamond-‚ñ∑ : ‚àÄ{n tag} ‚Üí diamond (_‚ñ∑_ {n = n}{tag})
diamond-‚ñ∑ (‚ãÜ i)(‚ãÜ i) = ‚ãÜ i , (‚ãÜ i , ‚ãÜ i)
diamond-‚ñ∑ (var v)(var v) = var v , (var v , var v)
diamond-‚ñ∑ ([ œÄ x: S‚ñ∑S' ]‚Üí T‚ñ∑T')([ œÄ x: S‚ñ∑S‚Ä≥ ]‚Üí T‚ñ∑T‚Ä≥)
  with diamond-‚ñ∑ S‚ñ∑S' S‚ñ∑S‚Ä≥ | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥
diamond-‚ñ∑ ([ œÄ x: S‚ñ∑S' ]‚Üí T‚ñ∑T')([ œÄ x: S‚ñ∑S‚Ä≥ ]‚Üí T‚ñ∑T‚Ä≥)
  | S‚Ä¥ , (S'‚ñ∑S‚Ä¥ , S‚Ä≥‚ñ∑S‚Ä¥) | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥) =
  [ œÄ x: S‚Ä¥ ]‚Üí T‚Ä¥ , ([ œÄ x: S'‚ñ∑S‚Ä¥ ]‚Üí T'‚ñ∑T‚Ä¥ , [ œÄ x: S‚Ä≥‚ñ∑S‚Ä¥ ]‚Üí T‚Ä≥‚ñ∑T‚Ä¥)
diamond-‚ñ∑ (Œªx, t‚ñ∑t')(Œªx, t‚ñ∑t‚Ä≥) with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥
diamond-‚ñ∑ (Œªx, t‚ñ∑t') (Œªx, t‚ñ∑t‚Ä≥) | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥) =
  Œªx, t‚Ä¥ , (Œªx, t'‚ñ∑t‚Ä¥ , Œªx, t‚Ä≥‚ñ∑t‚Ä¥)
diamond-‚ñ∑ (s‚ñ∑s' Íûâ S‚ñ∑S') (s‚ñ∑s‚Ä≥ Íûâ S‚ñ∑S‚Ä≥)
  with diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑s‚Ä≥ | diamond-‚ñ∑ S‚ñ∑S' S‚ñ∑S‚Ä≥
diamond-‚ñ∑ (s‚ñ∑s' Íûâ S‚ñ∑S') (s‚ñ∑s‚Ä≥ Íûâ S‚ñ∑S‚Ä≥)
  | s‚Ä¥ , (s'‚ñ∑s‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥) | S‚Ä¥ , (S'‚ñ∑S‚Ä¥ , S‚Ä≥‚ñ∑S‚Ä¥) =
  s‚Ä¥ Íûâ S‚Ä¥ , (s'‚ñ∑s‚Ä¥ Íûâ S'‚ñ∑S‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥ Íûâ S‚Ä≥‚ñ∑S‚Ä¥)
diamond-‚ñ∑ ‚åä e‚ñ∑e' ‚åã ‚åä e‚ñ∑e‚Ä≥ ‚åã with diamond-‚ñ∑ e‚ñ∑e' e‚ñ∑e‚Ä≥
diamond-‚ñ∑ ‚åä e‚ñ∑e' ‚åã ‚åä e‚ñ∑e‚Ä≥ ‚åã | e‚Ä¥ , (e'‚ñ∑e‚Ä¥ , e‚Ä≥‚ñ∑e‚Ä¥) =
  ‚åä e‚Ä¥ ‚åã , (‚åä e'‚ñ∑e‚Ä¥ ‚åã , ‚åä e‚Ä≥‚ñ∑e‚Ä¥ ‚åã)
diamond-‚ñ∑ ‚åä t‚ñ∑t' Íûâ _ ‚åã (elim-comp _ t‚ñ∑t‚Ä≥) with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥
diamond-‚ñ∑ ‚åä t‚ñ∑t' Íûâ _ ‚åã (elim-comp _ t‚ñ∑t‚Ä≥) | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥) =
  t‚Ä¥ , (elim-comp _ t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥)
diamond-‚ñ∑ (elim-comp _ t‚ñ∑t') ‚åä t‚ñ∑t‚Ä≥ Íûâ _ ‚åã with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥
diamond-‚ñ∑ (elim-comp _ t‚ñ∑t') ‚åä t‚ñ∑t‚Ä≥ Íûâ _ ‚åã | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥) =
  t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , elim-comp _ t‚Ä≥‚ñ∑t‚Ä¥)
diamond-‚ñ∑ (elim-comp T t‚ñ∑t')(elim-comp T t‚ñ∑t‚Ä≥) = diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥
diamond-‚ñ∑ (f‚ñ∑f' ` s‚ñ∑s') (f‚ñ∑f‚Ä≥ ` s‚ñ∑s‚Ä≥)
  with diamond-‚ñ∑ f‚ñ∑f' f‚ñ∑f‚Ä≥ | diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑s‚Ä≥
diamond-‚ñ∑ (f‚ñ∑f' ` s‚ñ∑s') (f‚ñ∑f‚Ä≥ ` s‚ñ∑s‚Ä≥)
  | f‚Ä¥ , (f'‚ñ∑f‚Ä¥ , f‚Ä≥‚ñ∑f‚Ä¥) | s‚Ä¥ , (s'‚ñ∑s‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥) =
  f‚Ä¥ ` s‚Ä¥ , (f'‚ñ∑f‚Ä¥ ` s'‚ñ∑s‚Ä¥ , f‚Ä≥‚ñ∑f‚Ä¥ ` s‚Ä≥‚ñ∑s‚Ä¥)
diamond-‚ñ∑ ((Œªx, t‚ñ∑t' Íûâ [ œÄ x: S‚ñ∑S' ]‚Üí T‚ñ∑T') ` s‚ñ∑s')
           (lam-comp œÄ t‚ñ∑t‚Ä≥ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥ s‚ñ∑s‚Ä≥)
  with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥ | diamond-‚ñ∑ S‚ñ∑S' S‚ñ∑S‚Ä≥
     | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥ | diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑s‚Ä≥
diamond-‚ñ∑ _ (lam-comp œÄ {S' = S‚Ä≥}{s' = s‚Ä≥} _ _ _ _)
  | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥) | S‚Ä¥ , (S'‚ñ∑S‚Ä¥ , S‚Ä≥‚ñ∑S‚Ä¥)
  | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥) | s‚Ä¥ , (s'‚ñ∑s‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥) =
  (t‚Ä¥ Íûâ T‚Ä¥) [ s‚Ä¥ Íûâ S‚Ä¥ /new] ,
    (lam-comp œÄ t'‚ñ∑t‚Ä¥ S'‚ñ∑S‚Ä¥ T'‚ñ∑T‚Ä¥ s'‚ñ∑s‚Ä¥ ,
     liftSub-to-‚ñ∑ (newSub (s‚Ä≥ Íûâ S‚Ä≥)) (newSub (s‚Ä¥ Íûâ S‚Ä¥))
                  (t‚Ä≥‚ñ∑t‚Ä¥ Íûâ T‚Ä≥‚ñ∑T‚Ä¥)
                  (ap newSub $ s‚Ä≥‚ñ∑s‚Ä¥ Íûâ S‚Ä≥‚ñ∑S‚Ä¥))
diamond-‚ñ∑ (lam-comp œÄ t‚ñ∑t' S‚ñ∑S' T‚ñ∑T' s‚ñ∑s')
           ((Œªx, t‚ñ∑t‚Ä≥ Íûâ [ œÄ x: S‚ñ∑S‚Ä≥ ]‚Üí T‚ñ∑T‚Ä≥) ` s‚ñ∑s‚Ä≥)
  with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥ | diamond-‚ñ∑ S‚ñ∑S' S‚ñ∑S‚Ä≥
     | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥ | diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑s‚Ä≥
diamond-‚ñ∑ (lam-comp œÄ {S' = S'}{s' = s'} _ _ _ _) _
  | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥) | S‚Ä¥ , (S'‚ñ∑S‚Ä¥ , S‚Ä≥‚ñ∑S‚Ä¥)
  | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥) | s‚Ä¥ , (s'‚ñ∑s‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥) =
  (t‚Ä¥ Íûâ T‚Ä¥) [ s‚Ä¥ Íûâ S‚Ä¥ /new] ,
    (liftSub-to-‚ñ∑ (newSub (s' Íûâ S')) (newSub (s‚Ä¥ Íûâ S‚Ä¥))
                  (t'‚ñ∑t‚Ä¥ Íûâ T'‚ñ∑T‚Ä¥)
                  (ap newSub $ s'‚ñ∑s‚Ä¥ Íûâ S'‚ñ∑S‚Ä¥) ,
     lam-comp œÄ t‚Ä≥‚ñ∑t‚Ä¥ S‚Ä≥‚ñ∑S‚Ä¥ T‚Ä≥‚ñ∑T‚Ä¥ s‚Ä≥‚ñ∑s‚Ä¥)
diamond-‚ñ∑ (lam-comp œÄ t‚ñ∑t' S‚ñ∑S' T‚ñ∑T' s‚ñ∑s')
           (lam-comp œÄ t‚ñ∑t‚Ä≥ S‚ñ∑S‚Ä≥ T‚ñ∑T‚Ä≥ s‚ñ∑s‚Ä≥)
  with diamond-‚ñ∑ t‚ñ∑t' t‚ñ∑t‚Ä≥ | diamond-‚ñ∑ S‚ñ∑S' S‚ñ∑S‚Ä≥
     | diamond-‚ñ∑ T‚ñ∑T' T‚ñ∑T‚Ä≥ | diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑s‚Ä≥
diamond-‚ñ∑ (lam-comp œÄ {S' = S'}{s' = s'} _ _ _ _)
           (lam-comp œÄ {S' = S‚Ä≥}{s' = s‚Ä≥} _ _ _ _)
  | t‚Ä¥ , (t'‚ñ∑t‚Ä¥ , t‚Ä≥‚ñ∑t‚Ä¥) | S‚Ä¥ , (S'‚ñ∑S‚Ä¥ , S‚Ä≥‚ñ∑S‚Ä¥)
  | T‚Ä¥ , (T'‚ñ∑T‚Ä¥ , T‚Ä≥‚ñ∑T‚Ä¥) | s‚Ä¥ , (s'‚ñ∑s‚Ä¥ , s‚Ä≥‚ñ∑s‚Ä¥) =
  (t‚Ä¥ Íûâ T‚Ä¥) [ s‚Ä¥ Íûâ S‚Ä¥ /new] ,
    (liftSub-to-‚ñ∑ (newSub (s' Íûâ S')) (newSub (s‚Ä¥ Íûâ S‚Ä¥))
                  (t'‚ñ∑t‚Ä¥ Íûâ T'‚ñ∑T‚Ä¥)
                  (ap newSub $ s'‚ñ∑s‚Ä¥ Íûâ S'‚ñ∑S‚Ä¥) ,
     liftSub-to-‚ñ∑ (newSub (s‚Ä≥ Íûâ S‚Ä≥)) (newSub (s‚Ä¥ Íûâ S‚Ä¥))
                  (t‚Ä≥‚ñ∑t‚Ä¥ Íûâ T‚Ä≥‚ñ∑T‚Ä¥)
                  (ap newSub $ s‚Ä≥‚ñ∑s‚Ä¥ Íûâ S‚Ä≥‚ñ∑S‚Ä¥))

-- Corollary 16 (confluence)

open import Relation.Binary.ReflexiveTransitiveClosure
  renaming (refl-trans-close to rtc)

diamond-‚Ü† : ‚àÄ{n tag} ‚Üí diamond (_‚Ü†_ {n = n}{tag})
diamond-‚Ü† = parallelogram _‚áù_ diamond-‚ñ∑ 
  where instance _ = ‚áù-‚äÜ-‚ñ∑; _ = ‚ñ∑-‚äÜ-‚Ü†
