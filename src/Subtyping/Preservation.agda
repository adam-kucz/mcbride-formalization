{-# OPTIONS --exact-split --prop #-}
open import Basic
open import PropUniverses

module Subtyping.Preservation
  {R : ùí∞ Àô} ‚¶É rig : Rig R ‚¶Ñ
  {S : ùí± Àô} ‚¶É wfs : wfs ùí≤ ùíØ S ‚¶Ñ
  where

open import Subtyping.Definition

open import Data.Nat
open import Relation.Binary hiding (_~_)
open import Logic
open import Syntax.Definition
open import Computation
open import ParallelReduction

-- Lemma 19 (similarity preservation)

postulate
  step-‚ñ∑-preserves-~ : {S S' T : expr-of-type tag m}
    (p : S ~ T)
    (q : S ‚ñ∑ S')
    ‚Üí -------------------------
    ‚àÉ Œª T' ‚Üí S' ~ T' ‚àß T ‚ñ∑ T'
-- step-‚ñ∑-preserves-~ (~sort i) (sort i) =
--   ‚ãÜ i , (refl (‚ãÜ i) , refl (‚ãÜ i))
-- step-‚ñ∑-preserves-~ (~var v‚ÇÅ) (var v‚ÇÅ) =
--   var v‚ÇÅ , (refl (var v‚ÇÅ) , refl (var v‚ÇÅ))
-- step-‚ñ∑-preserves-~ (~pi œÄ p p‚ÇÅ) (pi œÄ q q‚ÇÅ)
--   with step-‚ñ∑-preserves-~ p q | step-‚ñ∑-preserves-~ p‚ÇÅ q‚ÇÅ
-- step-‚ñ∑-preserves-~ (~pi œÄ p p‚ÇÅ) (pi œÄ q q‚ÇÅ)
--   | S‚ÇÅ , (S'~S‚ÇÅ , S''‚ñ∑S‚ÇÅ) | T‚ÇÅ , (T'~T‚ÇÅ , T''‚ñ∑T‚ÇÅ) =
--   [ œÄ x: S‚ÇÅ ]‚Üí T‚ÇÅ , (~pi œÄ S'~S‚ÇÅ T'~T‚ÇÅ , pi œÄ S''‚ñ∑S‚ÇÅ T''‚ñ∑T‚ÇÅ)
-- step-‚ñ∑-preserves-~ (~lam p) (lam q) with step-‚ñ∑-preserves-~ p q
-- step-‚ñ∑-preserves-~ (~lam p) (lam q) | t‚ÇÅ , (t'~t‚ÇÅ , t''‚ñ∑t‚ÇÅ) =
--   Œªx, t‚ÇÅ , (~lam t'~t‚ÇÅ , lam t''‚ñ∑t‚ÇÅ)
-- step-‚ñ∑-preserves-~ (~elim p) (elim q) with step-‚ñ∑-preserves-~ p q
-- step-‚ñ∑-preserves-~ (~elim p) (elim q) | t‚ÇÅ , (t'~t‚ÇÅ , t''‚ñ∑t‚ÇÅ) =
--   ‚åä t‚ÇÅ ‚åã , (~elim t'~t‚ÇÅ , elim t''‚ñ∑t‚ÇÅ)
-- step-‚ñ∑-preserves-~
--   (~elim (~annot {s = s}{t} S T p))
--   (elim-comp {s}{s'}{S}{S'} q q‚ÇÅ) with step-‚ñ∑-preserves-~ p q
-- step-‚ñ∑-preserves-~
--   (~elim (~annot {s = s}{t} S T p))
--   (elim-comp {s}{s'}{S}{S'} q q‚ÇÅ) | T' , (s'~T' , t‚ñ∑T') =
--   T' , (s'~T' , elim-comp t‚ñ∑T' (refl T))
-- step-‚ñ∑-preserves-~ (~app p p‚ÇÅ) (app q q‚ÇÅ)
--   with step-‚ñ∑-preserves-~ p q | step-‚ñ∑-preserves-~ p‚ÇÅ q‚ÇÅ
-- step-‚ñ∑-preserves-~ (~app p p‚ÇÅ) (app q q‚ÇÅ)
--   | f‚ÇÅ , (f'~f‚ÇÅ , f''‚ñ∑f‚ÇÅ)
--   | s‚ÇÅ , (s'~s‚ÇÅ , s''‚ñ∑s‚ÇÅ) =
--   f‚ÇÅ ` s‚ÇÅ , (~app f'~f‚ÇÅ s'~s‚ÇÅ , app f''‚ñ∑f‚ÇÅ s''‚ñ∑s‚ÇÅ)
-- step-‚ñ∑-preserves-~
--   (~app (~annot ([ œÄ x: S ]‚Üí T) S' (~lam t~t'')) s~s'')
--   (lam-comp œÄ t‚ñ∑t' S‚ñ∑S'' T‚ñ∑T'' s‚ñ∑s')
--   with step-‚ñ∑-preserves-~ t~t'' t‚ñ∑t' | step-‚ñ∑-preserves-~ s~s'' s‚ñ∑s'
-- step-‚ñ∑-preserves-~
--   (~app (~annot ([ œÄ x: S ]‚Üí T) S' (~lam t~t'')) s~s'')
--   (lam-comp œÄ t‚ñ∑t' S‚ñ∑S'' T‚ñ∑T'' s‚ñ∑s')
--   | t‚ÇÅ , (t'~t‚ÇÅ , t''‚ñ∑t‚ÇÅ)
--   | s‚ÇÅ , (s'~s‚ÇÅ , s''‚ñ∑s‚ÇÅ) =
--   {!!} , ({!!} , {!lam-comp!})
-- step-‚ñ∑-preserves-~ (~annot S S' p) (annot q q‚ÇÅ) with step-‚ñ∑-preserves-~ p q
-- step-‚ñ∑-preserves-~ (~annot S T p) (annot {t' = s'}{T' = S'} q q‚ÇÅ)
--   | t‚ÇÅ , (s'~t‚ÇÅ , s''‚ñ∑t‚ÇÅ) =
--   t‚ÇÅ Íûâ T , (~annot S' T s'~t‚ÇÅ , annot s''‚ñ∑t‚ÇÅ (refl T))

open import Confluence

postulate
  steps-‚ñ∑-confluent-~ : {S S' T T' : expr-of-type tag m}
    (p : S ~ T)
    (q : S ‚ñ∑ S')
    (q' : T ‚ñ∑ T')
    ‚Üí -------------------------
    ‚àÉ Œª S‚Ä≥ ‚Üí
    ‚àÉ Œª T‚Ä≥ ‚Üí
    S‚Ä≥ ~ T‚Ä≥ ‚àß S' ‚ñ∑ S‚Ä≥ ‚àß T' ‚ñ∑ T‚Ä≥
-- steps-‚ñ∑-confluent-~ (~id S) q q' with diamond-‚ñ∑ q q'
-- steps-‚ñ∑-confluent-~ (~id S) q q' | S‚Ä≥ , (S'‚ñ∑S‚Ä≥ , T'‚ñ∑S‚Ä≥) =
--   S‚Ä≥ , (S‚Ä≥ , (
--   refl S‚Ä≥ , S'‚ñ∑S‚Ä≥ , T'‚ñ∑S‚Ä≥))
-- steps-‚ñ∑-confluent-~ (~annot S T (~id s))(annot s‚ñ∑s' S‚ñ∑S')(annot s‚ñ∑t' S‚ñ∑T')
--   with diamond-‚ñ∑ s‚ñ∑s' s‚ñ∑t'
-- steps-‚ñ∑-confluent-~ {S' = s' Íûâ S'}{T' = t' Íûâ T'}
--   (~annot S T (~id s))(annot s‚ñ∑s' S‚ñ∑S')(annot s‚ñ∑t' S‚ñ∑T')
--   | s‚Ä≥ , (s'‚ñ∑s‚Ä≥ , t'‚ñ∑s‚Ä≥) =
--   s‚Ä≥ Íûâ S' , (s‚Ä≥ Íûâ T' , (
--   ~annot S' T' (~id s‚Ä≥) ,
--   annot s'‚ñ∑s‚Ä≥ (refl S') ,
--   annot t'‚ñ∑s‚Ä≥ (refl T')))

open import Proposition.Identity hiding (refl)
open import Relation.Binary.ReflexiveTransitiveClosure
  renaming (refl-trans-close to rtc)

step-‚ñ∑*-preserves-~ : {S S' T : expr-of-type tag m}
  (p : S ~ T)
  (q : rtc _‚ñ∑_ S S')
  ‚Üí -------------------------
  ‚àÉ Œª T' ‚Üí S' ~ T' ‚àß rtc _‚ñ∑_ T T'
step-‚ñ∑*-preserves-~ {T = T} p (rfl S) = T , (p , refl T)
step-‚ñ∑*-preserves-~ p (step q q')
  with step-‚ñ∑-preserves-~ p q
step-‚ñ∑*-preserves-~ p (step q q') | T‚Ä≥ , (S‚Ä≥~T‚Ä≥ , T‚ñ∑T‚Ä≥)
  with step-‚ñ∑*-preserves-~ S‚Ä≥~T‚Ä≥ q'
step-‚ñ∑*-preserves-~ p (step q q')
  | _ , (_ , T‚ñ∑T‚Ä≥) | T' , (S'~T' , T‚Ä≥‚ñ∑*T') =
  T' , (S'~T' , step T‚ñ∑T‚Ä≥ T‚Ä≥‚ñ∑*T')

step-‚Ü†-preserves-~ : {S S' T : expr-of-type tag m}
  (p : S ~ T)
  (q : S ‚Ü† S')
  ‚Üí -------------------------
  ‚àÉ Œª T' ‚Üí S' ~ T' ‚àß T ‚Ü† T'
step-‚Ü†-preserves-~ {tag = tag}{m = m}{S = S}{S'} p q
  with step-‚ñ∑*-preserves-~ p q'
  where _‚ñ∑*_ = rtc (_‚ñ∑_ {n = m}{tag})
        q' : S ‚ñ∑* S'
        q' = subrel q
step-‚Ü†-preserves-~ p q | T' , (S'~T' , T‚ñ∑*T') =
  T' , (S'~T' , subrel ‚¶É r ‚¶Ñ T‚ñ∑*T')
  where instance r = subrel-rtc-to-rtc-subrel-rtc

-- TODO: figure out if the `proof` in the paper really doesn't work
postulate
  steps-‚Ü†-confluent-~ : {S S' T T' : expr-of-type tag m}
    (p : S ~ T)
    (q : S ‚Ü† S')
    (q' : T ‚Ü† T')
    ‚Üí -------------------------
    ‚àÉ Œª S‚Ä≥ ‚Üí
    ‚àÉ Œª T‚Ä≥ ‚Üí
    S‚Ä≥ ~ T‚Ä≥ ‚àß S' ‚Ü† S‚Ä≥ ‚àß T' ‚Ü† T‚Ä≥
-- steps-‚Ü†-confluent-~ {tag = tag}{m = m}{S = S}{S'}{T}{T'} p q q'
--   with steps-‚ñ∑*-confluent-~ p q‚ÇÅ q‚ÇÅ'
--   where _‚ñ∑*_ = rtc (_‚ñ∑_ {n = m}{tag})
--         q‚ÇÅ : S ‚ñ∑* S'
--         q‚ÇÅ = subrel q
--         q‚ÇÅ' : T ‚ñ∑* T'
--         q‚ÇÅ' = subrel q'
--         steps-‚ñ∑*-confluent-~ : {S S' T T' : expr-of-type tag m}
--           (p : S ~ T)
--           (q : S ‚ñ∑* S')
--           (q' : T ‚ñ∑* T')
--           ‚Üí -------------------------
--           ‚àÉ Œª S‚Ä≥ ‚Üí
--           ‚àÉ Œª T‚Ä≥ ‚Üí
--           S‚Ä≥ ~ T‚Ä≥ ‚àß S' ‚ñ∑* S‚Ä≥ ‚àß T' ‚ñ∑* T‚Ä≥
--         steps-‚ñ∑*-confluent-~ p (rfl S) (rfl T) =
--           S , (T , (p , refl S , refl T))
--         steps-‚ñ∑*-confluent-~ p (rfl S) (step T‚ñ∑T‚ÇÅ T‚ÇÅ‚ñ∑*T')
--           with steps-‚ñ∑-confluent-~ p (refl S) T‚ñ∑T‚ÇÅ
--              | step-‚ñ∑*-preserves-~ p ()
--              steps-‚ñ∑*-confluent-~ ({!step-‚ñ∑*-preserves-~!}) (refl S) T‚ÇÅ‚ñ∑*T'
--         steps-‚ñ∑*-confluent-~ p (rfl S) (step T‚ñ∑T‚ÇÅ T‚ÇÅ‚ñ∑*T')
--           | S‚ÇÇ , (T‚ÇÇ , (S‚ÇÇ~T‚ÇÇ , S‚ñ∑S‚ÇÇ , T‚ÇÅ‚ñ∑T‚ÇÇ)) | z = {!!}
--         steps-‚ñ∑*-confluent-~ p (step S‚ñ∑S‚ÇÅ S‚ÇÅ‚ñ∑*S') (rfl T) =
--           {!!}
--         steps-‚ñ∑*-confluent-~ p (step S‚ñ∑S‚ÇÅ S‚ÇÅ‚ñ∑*S') (step T‚ñ∑T‚ÇÅ T‚ÇÅ‚ñ∑*T') =
--           {!!}
-- steps-‚Ü†-confluent-~ _ _ _ | S‚Ä≥ , (T‚Ä≥ , (S‚Ä≥~T‚Ä≥ , S'‚ñ∑*S‚Ä≥ , T'‚ñ∑*T‚Ä≥)) =
--   S‚Ä≥ , (T‚Ä≥ , (S‚Ä≥~T‚Ä≥ , subrel ‚¶É r ‚¶Ñ S'‚ñ∑*S‚Ä≥ , subrel ‚¶É r ‚¶Ñ T'‚ñ∑*T‚Ä≥))
--   where instance r = subrel-rtc-to-rtc-subrel-rtc

-- Lemma 20 (subtyping preservation)

open import Type.Sum hiding (_,_)

step-‚Ü†-preserves-‚âº : {S S' T : expr-of-type tag m}
  (p : S ‚âº T)
  (q : S ‚Ü† S')
  ‚Üí -------------------------
  ‚àÉ Œª T' ‚Üí S' ‚âº T' ‚àß T ‚Ü† T'
step-‚Ü†-preserves-‚âΩ : {S T T' : expr-of-type tag m}
  (p : S ‚âº T)
  (q : T ‚Ü† T')
  ‚Üí -------------------------
  ‚àÉ Œª S' ‚Üí S' ‚âº T' ‚àß S ‚Ü† S'

step-‚Ü†-preserves-‚âº (‚âºsimilar p) q with step-‚Ü†-preserves-~ p q
step-‚Ü†-preserves-‚âº (‚âºsimilar p) q | T' , (S'~T' , T‚Ü†T') =
  T' , (‚âºsimilar S'~T' , T‚Ü†T')
step-‚Ü†-preserves-‚âº (‚âºsort {j = j} p) (rfl (‚ãÜ i)) =
  ‚ãÜ j , (‚âºsort p  , refl (‚ãÜ j))
step-‚Ü†-preserves-‚âº (‚âºsort _) (step ‚ãÜi‚áùS' _) =
  ‚ä•-recursion _ (sorts-don't-reduce ‚ãÜi‚áùS' (refl (‚ãÜ _)))
step-‚Ü†-preserves-‚âº (‚âºpi œÄ S‚Ä≥‚âºS T‚âºT‚Ä≥) q with pi-compute-forms q
step-‚Ü†-preserves-‚âº (‚âºpi œÄ S‚Ä≥‚âºS T‚âºT‚Ä≥) q
  | S' Œ£., T' , (S‚Ü†S' , T‚Ü†T' , Id‚Çö.refl ([ œÄ x: S' ]‚Üí T'))
  with step-‚Ü†-preserves-‚âº T‚âºT‚Ä≥ T‚Ü†T' | step-‚Ü†-preserves-‚âΩ S‚Ä≥‚âºS S‚Ü†S'
step-‚Ü†-preserves-‚âº (‚âºpi œÄ S‚Ä≥‚âºS T‚âºT‚Ä≥) q
  | S' Œ£., T' , (S‚Ü†S' , T‚Ü†T' , Id‚Çö.refl _)
  | T‚ÇÅ , (T'‚âºT‚ÇÅ , T‚Ä≥‚Ü†T‚ÇÅ)
  | S‚ÇÅ , (S‚ÇÅ‚âºS' , S‚Ä≥‚Ü†S‚ÇÅ) =
  [ œÄ x: S‚ÇÅ ]‚Üí T‚ÇÅ , (‚âºpi œÄ S‚ÇÅ‚âºS' T'‚âºT‚ÇÅ , mk-pi-compute œÄ S‚Ä≥‚Ü†S‚ÇÅ T‚Ä≥‚Ü†T‚ÇÅ)

step-‚Ü†-preserves-‚âΩ (‚âºsimilar p) q with step-‚Ü†-preserves-~ (sym p) q
step-‚Ü†-preserves-‚âΩ (‚âºsimilar p) q | T' , (S'~T' , T‚Ü†T') =
  T' , (‚âºsimilar (sym S'~T') , T‚Ü†T')
step-‚Ü†-preserves-‚âΩ (‚âºsort {i = i} p) (rfl (‚ãÜ j)) =
  ‚ãÜ i , (‚âºsort p , refl (‚ãÜ i))
step-‚Ü†-preserves-‚âΩ (‚âºsort _) (step ‚ãÜj‚áùT' _) =
    ‚ä•-recursion _ (sorts-don't-reduce ‚ãÜj‚áùT' (refl (‚ãÜ _)))
step-‚Ü†-preserves-‚âΩ (‚âºpi œÄ S‚Ä≥‚âºS T‚âºT‚Ä≥) q with pi-compute-forms q
step-‚Ü†-preserves-‚âΩ (‚âºpi œÄ S‚Ä≥‚âºS T‚âºT‚Ä≥) q
  | S' Œ£., T' , (S‚Ä≥‚Ü†S' , T‚Ä≥‚Ü†T' , Id‚Çö.refl ([ œÄ x: S' ]‚Üí T'))
  with step-‚Ü†-preserves-‚âΩ T‚âºT‚Ä≥ T‚Ä≥‚Ü†T' | step-‚Ü†-preserves-‚âº S‚Ä≥‚âºS S‚Ä≥‚Ü†S'
step-‚Ü†-preserves-‚âΩ (‚âºpi œÄ S‚Ä≥‚âºS T‚âºT‚Ä≥) q
  | S' Œ£., T' , (S‚Ä≥‚Ü†S' , T‚Ä≥‚Ü†T' , Id‚Çö.refl ([ œÄ x: S' ]‚Üí T'))
  | T‚ÇÅ , (T‚ÇÅ‚âºT' , T‚Ü†T‚ÇÅ)
  | S‚ÇÅ , (S'‚âºS‚ÇÅ , S‚Ü†S‚ÇÅ) =
  [ œÄ x: S‚ÇÅ ]‚Üí T‚ÇÅ , (‚âºpi œÄ S'‚âºS‚ÇÅ T‚ÇÅ‚âºT' , mk-pi-compute œÄ S‚Ü†S‚ÇÅ T‚Ü†T‚ÇÅ)

postulate
  steps-‚Ü†-confluent-‚âº : {S S' T T' : expr-of-type tag m}
    (p : S ‚âº T)
    (q : S ‚Ü† S')
    (q' : T ‚Ü† T')
    ‚Üí -------------------------
    ‚àÉ Œª S‚Ä≥ ‚Üí
    ‚àÉ Œª T‚Ä≥ ‚Üí
    S‚Ä≥ ‚âº T‚Ä≥ ‚àß S' ‚Ü† S‚Ä≥ ‚àß T' ‚Ü† T‚Ä≥
-- steps-‚Ü†-confluent-‚âº (‚âºsimilar p) q q' with steps-‚Ü†-confluent-~ p q q'
-- steps-‚Ü†-confluent-‚âº (‚âºsimilar p) q q'
--   | S‚Ä≥ , (T‚Ä≥ , (S‚Ä≥~T‚Ä≥ , S'‚Ü†S‚Ä≥ , T'‚Ü†T‚Ä≥)) =
--   S‚Ä≥ , (T‚Ä≥ , (‚âºsimilar S‚Ä≥~T‚Ä≥ , S'‚Ü†S‚Ä≥ , T'‚Ü†T‚Ä≥))
-- steps-‚Ü†-confluent-‚âº (sort p) (rfl (‚ãÜ i)) (rfl (‚ãÜ j)) =
--   ‚ãÜ i , (‚ãÜ j , (sort p , refl (‚ãÜ i) , refl (‚ãÜ j)))
-- steps-‚Ü†-confluent-‚âº (sort _) (rfl _) (step ‚ãÜj‚áùT' _) =
--     ‚ä•-recursion _ (sorts-don't-reduce ‚ãÜj‚áùT' (refl (‚ãÜ _)))
-- steps-‚Ü†-confluent-‚âº (sort _) (step ‚ãÜi‚áùS' _) _ =
--     ‚ä•-recursion _ (sorts-don't-reduce ‚ãÜi‚áùS' (refl (‚ãÜ _)))
-- steps-‚Ü†-confluent-‚âº (pi S‚ÇÅ‚âºS T‚âºT‚ÇÅ) q q'
--   with pi-compute-forms q | pi-compute-forms q'
-- steps-‚Ü†-confluent-‚âº (pi S‚ÇÅ‚âºS T‚âºT‚ÇÅ) q q'
--   | S‚ÇÇ Œ£., T‚ÇÇ , (S‚Ü†S‚ÇÇ , T‚Ü†T‚ÇÇ , Id‚Çö.refl ([ œÄ‚ÇÇ x: S‚ÇÇ ]‚Üí T‚ÇÇ))
--   | S‚ÇÉ Œ£., T‚ÇÉ , (S'‚Ü†S‚ÇÉ , T'‚Ü†T‚ÇÉ , Id‚Çö.refl ([ œÄ‚ÇÉ x: S‚ÇÉ ]‚Üí T‚ÇÉ)) =
--   {!!}

